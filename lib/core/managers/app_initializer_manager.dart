import 'package:com_nectrom_metetemplate/core/managers/logger_manager.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:path_provider/path_provider.dart';

class AppInitializerManager {
  static final AppInitializerManager instance = AppInitializerManager();

  LoggerManager? _logger;

  AppInitializerManager() {}

  /// UygulamanÄ±n baÅŸlatÄ±lmasÄ± iÃ§in gerekli olan tÃ¼m iÅŸlemleri gerÃ§ekleÅŸtirir.
  Future<void> initialize() async {
    await _initEnv(); // Ortam deÄŸiÅŸkenlerini yÃ¼kler.
    await _initLocalization(); // Dil ayarlarÄ±nÄ± yapÄ±landÄ±rÄ±r.
    await _initDatabase(); // VeritabanÄ±nÄ± baÅŸlatÄ±r.
    await _configureSystemUI(); // Sistem arayÃ¼zÃ¼nÃ¼ dÃ¼zenler.
    _initCrashlyticsOrBugTracking(); // Hata yÃ¶netimini yapÄ±landÄ±rÄ±r.

    _logger = LoggerManager.instance;

    _logger!.debug('AppInitializerManager baÅŸlatÄ±ldÄ±');
  }

  /// `.env` dosyasÄ±nÄ± yÃ¼kleyerek ortam deÄŸiÅŸkenlerini eriÅŸilebilir hale getirir.
  Future<void> _initEnv() async {
    await dotenv.load(fileName: ".env");
  }

  /// UygulamanÄ±n yerelleÅŸtirme sistemini baÅŸlatÄ±r.
  Future<void> _initLocalization() async {
    await EasyLocalization.ensureInitialized();
  }

  /// Hive veritabanÄ±nÄ± baÅŸlatÄ±r ve uygulama belgeleri dizininde saklar.
  Future<void> _initDatabase() async {
    final appDocumentDirectory = await getApplicationDocumentsDirectory();
    Hive.init(appDocumentDirectory.path);
  }

  /// Uygulamada hata izleme ve hata bildirme sistemini baÅŸlatÄ±r.
  void _initCrashlyticsOrBugTracking() {
    FlutterError.onError = (FlutterErrorDetails details) {
      FlutterError.presentError(details);
      _logger!.error('ğŸ”´ Hata: ${details.exceptionAsString()}');
    };
  }

  /// Bloc saÄŸlayÄ±cÄ±larÄ±nÄ± yÃ¶neten liste.
  List<BlocProvider> get blocProviders => [
        /*   BlocProvider<NetworkManagerCubit>(
          create: (context) => NetworkManagerCubit(context: context),
          lazy: false,
        ), */
      ];

  /// CihazÄ±n sistem arayÃ¼zÃ¼nÃ¼ (status bar, navigation bar vb.) Ã¶zelleÅŸtirir.
  Future<void> _configureSystemUI() async {
    await SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp, // Sadece dikey yÃ¶nlendirmeyi destekler.
      DeviceOrientation.portraitDown,
    ]);

    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent, // Durum Ã§ubuÄŸunu ÅŸeffaf yapar.
        statusBarIconBrightness: Brightness.dark, // Durum Ã§ubuÄŸu ikon rengini ayarlar.
        systemNavigationBarColor: Colors.white, // Alt navigasyon bar rengini belirler.
        systemNavigationBarIconBrightness: Brightness.dark, // Alt bar ikon rengini belirler.
      ),
    );
  }
}
