import 'package:battery_plus/battery_plus.dart';
import 'package:com_nectrom_metetemplate/core/managers/logger_manager.dart';

class BatteryManager {
  static final BatteryManager instance = BatteryManager();

  final LoggerManager _logger = LoggerManager.instance;
  Battery? _battery;

  BatteryManager() {
    _logger.debug('BatteryManager baÅŸlatÄ±ldÄ±');
    initialize();
  }

  Future<void> initialize() async {
    _battery = Battery();
  }

  /// Mevcut pil seviyesini dÃ¶ner (0-100)
  Future<int> getBatteryLevel() async {
    try {
      final level = await _battery!.batteryLevel;
      _logger.debug('Pil seviyesi alÄ±ndÄ±: %$level');
      return level;
    } catch (e, stackTrace) {
      _logger.error('ğŸ”´ Hata: ${e.toString()}\nStackTrace: $stackTrace');
      rethrow;
    }
  }

  /// Mevcut pil durumunu dÃ¶ner
  Future<BatteryState> getBatteryState() async {
    try {
      final state = await _battery!.batteryState;
      _logger.debug('Pil durumu alÄ±ndÄ±: $state');
      return state;
    } catch (e, stackTrace) {
      _logger.error('ğŸ”´ Hata: ${e.toString()}\nStackTrace: $stackTrace');
      rethrow;
    }
  }

  /// Pil durumu deÄŸiÅŸikliklerini dinler
  Stream<BatteryState> onBatteryStateChanged() => _battery!.onBatteryStateChanged;

  /// Pil seviyesi periyodik olarak okunur
  Stream<int> onBatteryLevelChanged({Duration interval = const Duration(seconds: 30)}) => Stream.periodic(interval).asyncMap((_) async {
        final level = await getBatteryLevel();
        _logger.debug('Periyodik pil seviyesi gÃ¼ncellendi: %$level');
        return level;
      });

  /// Pil durumuna gÃ¶re kullanÄ±cÄ±ya uygun aÃ§Ä±klama dÃ¶ner.
  String getBatteryStateDescription(BatteryState state) {
    const descriptions = {
      BatteryState.full: 'Pil tam dolu',
      BatteryState.charging: 'Pil ÅŸarj oluyor',
      BatteryState.discharging: 'Pil deÅŸarj oluyor',
      BatteryState.unknown: 'Pil durumu bilinmiyor',
      BatteryState.connectedNotCharging: 'Cihaz baÄŸlÄ± ama ÅŸarj olmuyor',
    };

    return descriptions[state] ?? 'Bilinmeyen pil durumu';
  }

  /// Pil seviyesi %15 ve altÄ±ndaysa kritiktir
  bool isBatteryLevelCritical(int level) => level <= 15;

  /// Pil seviyesi %30 ve altÄ±ndaysa dÃ¼ÅŸÃ¼ktÃ¼r
  bool isBatteryLevelLow(int level) => level <= 30;

  /// Pil seviyesi %30 Ã¼stÃ¼ndeyse yeterlidir
  bool isBatteryLevelSufficient(int level) => level > 30;

  /// CihazÄ±n pil durumu eÅŸleÅŸiyor mu?
  Future<bool> isBatteryState(BatteryState expected) async => (await getBatteryState()) == expected;

  /// Cihaz ÅŸarj oluyor mu?
  Future<bool> isCharging() => isBatteryState(BatteryState.charging);

  /// CihazÄ±n pili tam dolu mu?
  Future<bool> isFull() => isBatteryState(BatteryState.full);

  /// CihazÄ±n pili deÅŸarj mÄ± oluyor?
  Future<bool> isDischarging() => isBatteryState(BatteryState.discharging);
}
