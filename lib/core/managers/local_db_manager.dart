import 'package:hive_flutter/hive_flutter.dart';
import 'package:path_provider/path_provider.dart';

import 'logger_manager.dart';

class LocalDbManager {
  static final LocalDbManager instance = LocalDbManager();

  final LoggerManager _logger = LoggerManager.instance;

  // Hive Interface
  HiveInterface? hiveInterface;

  // Hive Boxs
  String appBoxName = "appBox";
  Box<Map<dynamic, dynamic>>? appBox;

  LocalDbManager() {
    _logger.debug('LocalDbManager baÅŸlatÄ±ldÄ±');
    initialize();
  }

  Future<void> initialize() async {
    try {
      /// Hive init
      final appDocumentDirectory = await getApplicationDocumentsDirectory();
      Hive.init(appDocumentDirectory.path);
      hiveInterface = Hive;

      // Box Open
      appBox = await _openBox(boxName: appBoxName);
    } catch (e, stackTrace) {
      _logger.error('ğŸ”´ Hata: ${e.toString()}\nStackTrace: $stackTrace');
      rethrow;
    }
  }

  /// Belirtilen isimdeki Hive kutusunu gÃ¼venli ÅŸekilde aÃ§ar.
  ///
  /// - Kutu zaten aÃ§Ä±ksa, mevcut aÃ§Ä±k kutu nesnesi dÃ¶ndÃ¼rÃ¼lÃ¼r.
  /// - AÃ§Ä±k deÄŸilse, `hiveInterface.openBox()` ile aÃ§Ä±lmaya Ã§alÄ±ÅŸÄ±lÄ±r.
  /// - AÃ§ma iÅŸlemi baÅŸarÄ±sÄ±z olursa veya kutu etkin deÄŸilse `null` dÃ¶ner.
  ///
  /// [boxName] - AÃ§Ä±lmasÄ± veya eriÅŸilmesi istenen kutunun adÄ±.
  Future<Box<Map>?> _openBox({required String boxName}) async {
    try {
      if (Hive.isBoxOpen(boxName)) {
        final existingBox = Hive.box<Map>(boxName);
        _logger.debug('Box zaten aÃ§Ä±k: $boxName');
        return existingBox;
      }

      if (hiveInterface == null) {
        _logger.error('HiveInterface null olduÄŸu iÃ§in kutu aÃ§Ä±lamadÄ±.');
        return null;
      }

      final openedBox = await hiveInterface!.openBox<Map>(boxName);

      if (openedBox.isOpen) {
        _logger.debug('Box "$boxName" baÅŸarÄ±yla aÃ§Ä±ldÄ±.');
        return openedBox;
      } else {
        _logger.debug('Box "$boxName" aÃ§Ä±ldÄ± ancak etkin deÄŸil (isOpen = false).');
      }
    } catch (e, stackTrace) {
      _logger.error('ğŸ”´ Hata: ${e.toString()}\nStackTrace: $stackTrace');
      rethrow;
    }

    return null;
  }

  /// Verilen kutuya, belirli bir anahtar ile deÄŸer ekler veya gÃ¼nceller.
  ///
  /// [boxName] : Ä°ÅŸlem yapÄ±lacak kutunun adÄ±.
  /// [key] : Eklenecek veya gÃ¼ncellenecek anahtar.
  /// [value] : Anahtar iÃ§in atanacak deÄŸer.
  Future<void> put({required String boxName, dynamic key, dynamic value}) async {
    try {
      if (!Hive.isBoxOpen(boxName)) {
        _logger.error('$boxName kapalÄ± olduÄŸu iÃ§in yazma iÅŸlemi gerÃ§ekleÅŸtirilemedi');
        return;
      }

      final box = Hive.box<Map>(boxName);
      await box.put(key, value);
      _logger.debug('$boxName iÃ§erisine veri yazÄ±ldÄ±: key="$key"');
    } catch (e, stackTrace) {
      _logger.error('ğŸ”´ Hata: ${e.toString()}\nStackTrace: $stackTrace');
      rethrow;
    }
  }

  /// Verilen kutudan, belirli bir anahtara karÅŸÄ±lÄ±k gelen deÄŸeri dÃ¶ner.
  dynamic get({required String boxName, dynamic key, dynamic defaultValue}) {
    try {
      if (!Hive.isBoxOpen(boxName)) {
        _logger.error('$boxName kapalÄ± olduÄŸu iÃ§in yazma iÅŸlemi gerÃ§ekleÅŸtirilemedi');
        return;
      }

      final box = Hive.box<Map>(boxName);
      final value = box.get(key, defaultValue: defaultValue);
      _logger.debug('$boxName iÃ§erisinden veri okundu: key="$key"');
      return value;
    } catch (e, stackTrace) {
      _logger.error('ğŸ”´ Hata: ${e.toString()}\nStackTrace: $stackTrace');
      rethrow;
    }
  }

  /// Verilen kutudan belirli bir anahtar ile kaydÄ± siler.
  Future<void> delete({required String boxName, dynamic key}) async {
    try {
      if (!Hive.isBoxOpen(boxName)) {
        _logger.error('$boxName kapalÄ± olduÄŸu iÃ§in yazma iÅŸlemi gerÃ§ekleÅŸtirilemedi');
        return;
      }

      final box = Hive.box<Map>(boxName);
      await box.delete(key);
      _logger.debug('$boxName iÃ§erisinden veri silindi: key="$key"');
    } catch (e, stackTrace) {
      _logger.error('ğŸ”´ Hata: ${e.toString()}\nStackTrace: $stackTrace');
      rethrow;
    }
  }

  /// Belirtilen kutudaki tÃ¼m verileri temizler.
  Future<void> clearBox({required String boxName}) async {
    try {
      if (!Hive.isBoxOpen(boxName)) {
        _logger.error('$boxName kapalÄ± olduÄŸu iÃ§in yazma iÅŸlemi gerÃ§ekleÅŸtirilemedi');
        return;
      }

      final box = Hive.box<Map>(boxName);
      await box.clear();
      _logger.debug('$boxName iÃ§erisindeki verilerin hepsi silindi');
    } catch (e, stackTrace) {
      _logger.error('ğŸ”´ Hata: ${e.toString()}\nStackTrace: $stackTrace');
      rethrow;
    }
  }

  /// Belirtilen Hive kutusundaki tÃ¼m verileri key-value Ã§iftleri olarak dÃ¶ner.
  ///
  /// [boxName]: EriÅŸim yapÄ±lacak kutunun adÄ±.
  /// EÄŸer kutu kapalÄ±ysa veya hata oluÅŸursa boÅŸ bir map dÃ¶ner.
  Map<dynamic, dynamic> getAll({required String boxName}) {
    try {
      if (!Hive.isBoxOpen(boxName)) {
        _logger.error('$boxName kapalÄ± olduÄŸu iÃ§in yazma iÅŸlemi gerÃ§ekleÅŸtirilemedi');
        throw Exception('$boxName kapalÄ± olduÄŸu iÃ§in yazma iÅŸlemi gerÃ§ekleÅŸtirilemedi');
      }

      final box = Hive.box<Map>(boxName);
      final data = box.toMap();
      _logger.debug('$boxName iÃ§erisinden ${data.length} kayÄ±t listelendi');
      return data;
    } catch (e, stackTrace) {
      _logger.error('ğŸ”´ Hata: ${e.toString()}\nStackTrace: $stackTrace');
      rethrow;
    }
  }
}
